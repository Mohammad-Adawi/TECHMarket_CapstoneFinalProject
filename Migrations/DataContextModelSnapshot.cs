// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechMarket.Data;

namespace TechMarket.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("TechMarket.Data.ProductDetails", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AudioCodec")
                        .HasColumnType("TEXT");

                    b.Property<string>("Backlight")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaterryCells")
                        .HasColumnType("TEXT");

                    b.Property<string>("BatterySize")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bluetooth")
                        .HasColumnType("TEXT");

                    b.Property<string>("CacheSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("CacheType")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardReaderSupport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardReaderType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChipsetType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpu")
                        .HasColumnType("TEXT");

                    b.Property<string>("CpuSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dimensions")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayResolution")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplaySize")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayTech")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Features")
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphicName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphicSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("HardDriveSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("HardDriveType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl1")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl2")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl3")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mainboard")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumCores")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RamSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("RamSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("RamType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sound")
                        .HasColumnType("TEXT");

                    b.Property<string>("Webcam")
                        .HasColumnType("TEXT");

                    b.Property<string>("Weight")
                        .HasColumnType("TEXT");

                    b.Property<string>("WirelessController")
                        .HasColumnType("TEXT");

                    b.Property<string>("WirelessProtocol")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            ProductDetailId = 1,
                            AudioCodec = "",
                            Backlight = "",
                            BaterryCells = "",
                            BatterySize = "",
                            Bluetooth = "",
                            CacheSize = "",
                            CacheType = "",
                            CardReaderSupport = "",
                            CardReaderType = "",
                            ChipsetType = "",
                            Cpu = "",
                            CpuSpeed = "",
                            Dimensions = "",
                            DisplayResolution = "",
                            DisplaySize = "",
                            DisplayTech = "",
                            DisplayType = "",
                            Features = "",
                            GraphicName = "",
                            GraphicSize = "",
                            HardDriveSize = "",
                            HardDriveType = "",
                            ImgUrl1 = "",
                            ImgUrl2 = "",
                            ImgUrl3 = "",
                            InputType = "",
                            Mainboard = "",
                            Manufacturer = "",
                            Name = "",
                            NumCores = "",
                            OperatingSystem = "",
                            ProductId = 1,
                            RamSize = "",
                            RamType = "",
                            Sound = "",
                            Webcam = "",
                            Weight = "",
                            WirelessController = "",
                            WirelessProtocol = ""
                        });
                });

            modelBuilder.Entity("TechMarket.Model.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("productId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("productImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("productInformation")
                        .HasColumnType("TEXT");

                    b.Property<string>("productName")
                        .HasColumnType("TEXT");

                    b.Property<double>("productPrice")
                        .HasColumnType("REAL");

                    b.Property<int>("quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("TechMarket.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fullname")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHashed")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            DateCreated = new DateTime(2020, 6, 7, 11, 58, 45, 923, DateTimeKind.Local).AddTicks(1970),
                            Email = "",
                            Fullname = "",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHashed = "JcaVYk4YsSSI82upROY4eCKiZX2hoTkYpDQdzsrPziI=",
                            PasswordSalt = new byte[] { 129, 194, 226, 241, 99, 46, 164, 240, 115, 36, 96, 174, 4, 187, 104, 128 }
                        });
                });

            modelBuilder.Entity("TechMarket.Model.OrderDetails", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SalePrice")
                        .HasColumnType("REAL");

                    b.HasKey("DetailId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TechMarket.Model.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfItems")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderName")
                        .HasColumnType("TEXT");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("REAL");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TechMarket.Model.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductInformation")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("REAL");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductImageUrl = "",
                            ProductInformation = "",
                            ProductName = "",
                            ProductPrice = 0.0
                        });
                });

            modelBuilder.Entity("TechMarket.Data.ProductDetails", b =>
                {
                    b.HasOne("TechMarket.Model.Products", "Products")
                        .WithMany("productDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMarket.Model.Cart", b =>
                {
                    b.HasOne("TechMarket.Model.Customer", "Customer")
                        .WithMany("Cart")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMarket.Model.OrderDetails", b =>
                {
                    b.HasOne("TechMarket.Model.Orders", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMarket.Model.Orders", b =>
                {
                    b.HasOne("TechMarket.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
